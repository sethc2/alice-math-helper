{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","hasRan","setHasRan","maxNumber","setMaxNumber","useAddition","setUseAddition","goal","setGoal","wrongAnswer","setWrongAnswer","setFlashGreen","numCorrect","setNumCorrect","numWrong","setNumWrong","currentNumCorrect","useRef","current","meterValue","setMeterValue","currentMeterValue","getNext","max","Math","floor","random","getSet","addition","firstNumber","secondNumber","set","Set","add","size","answers","Array","from","sort","a","b","number1","number2","getAddition","numerator","denominator","getMultiplication","setCurrentProblem","timeRemaining","setTimeRemaining","currentTimeRemaining","countdownTimer","useEffect","setTimeout","meterTimer","clearInterval","countdown","setInterval","delta","isWaiting","flashTimeout","goalInput","setGoalInput","className","onClick","type","value","onChange","e","target","newGoal","parseInt","style","fontSize","clearTimeout","flex","display","justifyContent","flexDirection","alignItems","fontWeight","map","answer","index","makeGreen","makeRed","gridColumnStart","gridRowStart","background","onSelectAnswer","gridRowEnd","min","transform","height","width","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a1fbd6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState, useRef } from \"react\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction App() {\n  const [hasRan, setHasRan] = useState(false);\n  const [maxNumber, setMaxNumber] = useState(9);\n  const [useAddition, setUseAddition] = useState(false);\n\n  const [goal, setGoal] = useState(30);\n\n  const [wrongAnswer, setWrongAnswer] = useState(null);\n  const [flashGreen, setFlashGreen] = useState(false);\n  const [numCorrect, setNumCorrect] = useState(0);\n  const [numWrong, setNumWrong] = useState(0);\n\n  const currentNumCorrect = useRef(numCorrect);\n  currentNumCorrect.current = numCorrect;\n\n  const [meterValue, setMeterValue] = useState(0);\n\n  const currentMeterValue = useRef(meterValue);\n\n  currentMeterValue.current = meterValue;\n\n  const getNext = () => {\n    return getRandomInt(maxNumber) + 1;\n  };\n\n  const getAddition = () => {\n    const firstNumber = getNext();\n    const secondNumber = getNext();\n\n    const set = new Set();\n    set.add(firstNumber + secondNumber);\n    while (set.size < 4) {\n      set.add(getNext() + secondNumber);\n    }\n\n    const answers = Array.from(set);\n    answers.sort((a, b) => a - b);\n    return { number1: firstNumber, number2: secondNumber, answers };\n  };\n\n  const getMultiplication = () => {\n    const numerator = getNext();\n    const denominator = getNext();\n\n    const set = new Set();\n    set.add(numerator * denominator);\n    while (set.size < 4) {\n      set.add(getNext() * denominator);\n    }\n\n    const answers = Array.from(set);\n    answers.sort((a, b) => a - b);\n    return { number1: numerator, number2: denominator, answers };\n  };\n\n  const getSet = (addition) => {\n    if (addition) {\n      return getAddition();\n    }\n    return getMultiplication();\n  };\n\n  const [{ number1, number2, answers }, setCurrentProblem] = useState(() =>\n    getSet()\n  );\n\n  const [timeRemaining, setTimeRemaining] = useState(0);\n\n  const currentTimeRemaining = useRef(timeRemaining);\n\n  currentTimeRemaining.current = timeRemaining;\n\n  const countdownTimer = useRef();\n  useEffect(() => {\n    if (timeRemaining <= 0) {\n    } else {\n      countdownTimer.current = setTimeout(() => {\n        currentTimeRemaining.current = timeRemaining - 1;\n        setTimeRemaining(timeRemaining - 1);\n        //setMeterValue(Math.max(0, currentMeterValue.current - 1.5));\n      }, 1000);\n    }\n  }, [timeRemaining]);\n\n  const meterTimer = useRef();\n\n  if (timeRemaining <= 0 && meterTimer.current) {\n    clearInterval(meterTimer.current);\n    meterTimer.current = null;\n  }\n\n  const countdown = timeRemaining - 60;\n\n  useEffect(() => {\n    if (timeRemaining > 0 && !meterTimer.current && countdown <= 0) {\n      meterTimer.current = setInterval(() => {\n        if (currentTimeRemaining.current > 0) {\n          const delta = Math.max(\n            0.001,\n            (goal + 1 - currentNumCorrect.current) /\n              currentTimeRemaining.current /\n              2\n          );\n\n          currentMeterValue.current -= delta;\n          setMeterValue(Math.max(0, currentMeterValue.current));\n        }\n      }, 50);\n    }\n  }, [timeRemaining, goal]);\n\n  const onStart = () => {};\n\n  const onSelectAddition = () => {\n    currentMeterValue.current = 10;\n    setMeterValue(10);\n    setUseAddition(true);\n    onStart();\n    if (timeRemaining) {\n      clearTimeout(countdownTimer.current);\n    }\n    setCurrentProblem(getSet(true));\n    setNumWrong(0);\n\n    currentNumCorrect.current = 0;\n    setNumCorrect(0);\n\n    setTimeRemaining(63);\n    setHasRan(true);\n  };\n\n  const onSelectMultiplication = () => {\n    currentMeterValue.current = 10;\n    setMeterValue(10);\n    setUseAddition(false);\n    onStart();\n    if (timeRemaining) {\n      clearTimeout(countdownTimer.current);\n    }\n    setCurrentProblem(getSet(false));\n    setNumWrong(0);\n\n    currentNumCorrect.current = numCorrect;\n    setNumCorrect(0);\n\n    setTimeRemaining(63);\n    setHasRan(true);\n  };\n\n  const isWaiting = useRef(false);\n\n  const flashTimeout = useRef(null);\n\n  const onSelectAnswer = (answer) => {\n    if (timeRemaining && !isWaiting.current) {\n      const actualAnswer = useAddition ? number1 + number2 : number1 * number2;\n      if (answer === actualAnswer) {\n        currentNumCorrect.current = numCorrect + 1;\n        setNumCorrect(numCorrect + 1);\n\n        currentMeterValue.current = 10;\n        setMeterValue(10);\n        setCurrentProblem(getSet(useAddition));\n        setFlashGreen(true);\n        clearTimeout(flashTimeout.current);\n        flashTimeout.current = setTimeout(() => {\n          setFlashGreen(false);\n        }, 1000);\n      } else {\n        isWaiting.current = true;\n        setNumWrong(numWrong + 1);\n        setWrongAnswer(answer);\n        setTimeout(() => {\n          setWrongAnswer(null);\n          setCurrentProblem(getSet(useAddition));\n          isWaiting.current = false;\n        }, 2000);\n      }\n    }\n  };\n  const [goalInput, setGoalInput] = useState(goal);\n  return (\n    <div>\n      {!timeRemaining && (\n        <div className=\"intro\">\n          <div className=\"levels\">\n            <div className=\"levelsdesc\">Select difficulty</div>\n            <button\n              className={maxNumber === 4 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(4);\n              }}\n            >\n              4\n            </button>\n            <button\n              className={maxNumber === 5 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(5);\n              }}\n            >\n              5\n            </button>\n            <button\n              className={maxNumber === 6 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(6);\n              }}\n            >\n              6\n            </button>\n            <button\n              className={maxNumber === 7 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(7);\n              }}\n            >\n              7\n            </button>\n            <button\n              className={maxNumber === 8 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(8);\n              }}\n            >\n              8\n            </button>\n            <button\n              className={maxNumber === 9 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(9);\n              }}\n            >\n              9\n            </button>\n            <button\n              className={maxNumber === 10 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(10);\n              }}\n            >\n              10\n            </button>\n            <button\n              className={maxNumber === 11 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(11);\n              }}\n            >\n              11\n            </button>\n            <button\n              className={maxNumber === 12 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(12);\n              }}\n            >\n              12\n            </button>\n            <button\n              className={maxNumber === 13 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(13);\n              }}\n            >\n              13\n            </button>\n            <button\n              className={maxNumber === 14 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(14);\n              }}\n            >\n              14\n            </button>\n            <button\n              className={maxNumber === 15 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(15);\n              }}\n            >\n              15\n            </button>\n            <button\n              className={maxNumber === 16 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(16);\n              }}\n            >\n              16\n            </button>\n            <button\n              className={maxNumber === 17 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(17);\n              }}\n            >\n              17\n            </button>\n            <button\n              className={maxNumber === 18 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(18);\n              }}\n            >\n              18\n            </button>\n            <button\n              className={maxNumber === 19 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(19);\n              }}\n            >\n              19\n            </button>\n            <button\n              className={maxNumber === 20 ? \"selected\" : \"\"}\n              onClick={() => {\n                setMaxNumber(20);\n              }}\n            >\n              20\n            </button>\n            <div>\n              <label>Goal: </label>\n              <input\n                type=\"number\"\n                value={goalInput}\n                onChange={(e) => {\n                  setGoalInput(e.target.value);\n                  const newGoal = parseInt(e.target.value);\n                  if (newGoal > 5 && newGoal < 100) {\n                    setGoal(newGoal);\n                  }\n                }}\n              />\n            </div>\n          </div>\n\n          <div>\n            <div>\n              {hasRan && !timeRemaining ? `You got ${numCorrect} right!` : \"\"}\n            </div>\n            <div>\n              {\" \"}\n              {hasRan && !timeRemaining ? `You got ${numWrong} wrong.` : \"\"}\n            </div>\n          </div>\n          <button style={{ fontSize: 20 }} onClick={onSelectAddition}>\n            Addition test\n          </button>\n          <button style={{ fontSize: 20 }} onClick={onSelectMultiplication}>\n            Multiplication test\n          </button>\n        </div>\n      )}\n      {countdown > 0 && <div className=\"countdown\">{countdown}</div>}\n      {countdown <= 0 && timeRemaining > 0 && (\n        <div className={`App${countdown > 0 ? \" app-opaque\" : \"\"}`}>\n          <div\n            style={{\n              flex: \"1\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <div>\n              <div>Time left: {timeRemaining}s</div>\n            </div>\n            <div\n              style={{\n                fontWeight: \"bold\",\n                fontSize: \"60px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              {!useAddition && (\n                <span>\n                  {number1} X {number2}\n                </span>\n              )}\n              {useAddition && (\n                <span>\n                  {number1} + {number2}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"Answer\">\n            {answers.map((answer, index) => {\n              const makeGreen =\n                wrongAnswer !== null &&\n                answer ===\n                  (useAddition ? number1 + number2 : number1 * number2);\n\n              const makeRed = wrongAnswer === answer;\n              return (\n                <div\n                  className=\"AnswerDiv\"\n                  style={{\n                    gridColumnStart: index % 2 ? 2 : 1,\n                    gridRowStart: index >= 2 ? 2 : 1,\n                  }}\n                >\n                  <button\n                    style={{\n                      background: makeGreen\n                        ? \"lightgreen\"\n                        : makeRed\n                        ? \"red\"\n                        : \"lightgrey\",\n                    }}\n                    onClick={() => onSelectAnswer(answer)}\n                  >\n                    {answer}\n                  </button>\n                </div>\n              );\n            })}\n            <div\n              style={{\n                gridColumnStart: 3,\n                gridRowStart: 1,\n                gridRowEnd: 3,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <meter\n                max={10}\n                min={0}\n                value={meterValue}\n                style={{\n                  transform: \"rotate(270deg)\",\n                  height: \"60px\",\n                  width: \"170px\",\n                  position: \"absolute\",\n                  \"--transition-speed\": meterValue >= 8 ? \"0\" : \"0.5s\",\n                  \"--meter-color\":\n                    meterValue >= 8\n                      ? \"green\"\n                      : meterValue > 5\n                      ? \"yellow\"\n                      : \"red\",\n                  \"--red-rgb\":\n                    meterValue >= 8\n                      ? 0\n                      : meterValue < 5\n                      ? 255\n                      : (255 * (meterValue - 5)) / 3,\n                  \"--green-rgb\":\n                    meterValue >= 5\n                      ? 255\n                      : meterValue <= 2\n                      ? 0\n                      : 255 - (255 * (meterValue - 2)) / 3,\n                }}\n              ></meter>\n            </div>\n          </div>\n          <div\n            style={{\n              flex: \"1\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"space-evenly\",\n              alignItems: \"center\",\n              fontSize: \"60px\",\n            }}\n          >\n            <div style={{ fontSize: 32 }}>\n              Goal progress:{\" \"}\n              <meter value={numCorrect} min={0} max={goal}></meter>\n            </div>\n            <div style={{ fontSize: 32 }}>Wrong: {numWrong}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}